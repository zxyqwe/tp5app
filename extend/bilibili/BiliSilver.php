<?php

namespace bilibili;

class BiliSilver extends BiliBase
{
    private $OCR = array(

        '1' => '0011111001111101111110111111011111101111111111111111111111111110011111001111100111110011111001111100111110011111001111100111110011111001111100111110011111001111100111110011111001111100111110011111001111100111110011111',


        '4' => '00000001111110000000000011111100000000001111110000000000011111100000000000111110000000000011111100000000000111111000000000001111100000000000111111000000000001111110000000000011111000000000001111110000000000011111101111100000111110011111000011111100111110000111111001111100001111100011111000111111000111110001111110001111100011111000011111001111110000111110011111111111111111111111111111111111111111111111111111111111111111111000000000011111000000000000111110000000000001111100000000000011111000000000000111110000000000001111100',






        '-' => '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    );

    public function silver()
    {
        if ($this->lock('day_empty')) {
            return;
        }
        $data = $this->silverTask();
        if (empty($data)) {
            return;
        }
        $data = json_decode($data, true);
        $start = $data['data']['time_start'];
        $end = $data['data']['time_end'];
        if (time() < $end) {
            return;
        }
        $captcha = $this->captcha();
        if ($captcha === false) {
            return;
        }
        $urlapi = $this->prefix . "lottery/v1/SilverBox/getAward?time_start=$start&time_end=$end&captcha=$captcha";
        $res = $this->bili_Post($urlapi, $this->cookie, $this->room_id);
        $data = json_decode($res, true);
        if ($data['code'] === 0) {
            trace("领取银瓜子：{$data['data']['silver']} (+{$data['data']['awardSilver']})");
            $this->lock('silverTask', -1);
            $this->silverTask();
        } else {
            if ('访问被拒绝' === $data['msg']){
                return;
            }
            if (-903 === $data['code'] || false !== strpos($data['msg'], '过期')) {
                trace("领取失败：{$data['msg']}");
                $this->lock('silverTask', -1);
                $this->silverTask();
                return;
            }
            trace("领取失败：$res");
        }
    }

    private function silverTask()
    {
        if ($this->lock('silverTask')) {
            return $this->lock('silverTask', 1);
        }
        $urlapi = $this->prefix . 'lottery/v1/SilverBox/getCurrentTask';
        $res = $this->bili_Post($urlapi, $this->cookie, $this->room_id);
        $data = json_decode($res, true);
        switch ($data['code']) {
            case -101:
                trace("silverTask $res");
                return '';
            case -10017:
                trace("day empty {$data['msg']}");
                $this->lock('day_empty', $this->long_timeout());
                return '';
        }
        return $this->lock('silverTask', 1, $res);
    }

    private function captcha()
    {
        $urlapi = $this->prefix . 'lottery/v1/SilverBox/getCaptcha?ts=' . time();
        $raw = $this->bili_Post($urlapi, $this->cookie, $this->room_id);
        $data = json_decode($raw, true);
        if ($data['code'] !== 0) {
            trace("captcha $raw");
            return false;
        }
        $data = $data['data']['img'];
        $raw = substr($data, strpos($data, 'base64,') + 7);
        $raw = base64_decode($raw);
        $image = imagecreatefromstring($raw);
        if ($image === false) {
            trace("captcha image $raw");
            return false;
        }
        $width = imagesx($image);
        $height = imagesy($image);
        $vis = [];
        $grey = [];
        for ($i = 0; $i < $height; $i++) {
            for ($j = 0; $j < $width; $j++) {
                $grey[$i][$j] = (imagecolorat($image, $j, $i) >> 16) & 0xFF;
            }
        }
        for ($i = 0; $i < $width; $i++) {
            $vis[$i] = 0;
        }
        for ($i = 0; $i < $height; $i++) {
            for ($j = 0; $j < $width; $j++) {
                $vis[$j] |= $grey[$i][$j] < 220;
            }
        }
        $result = '';
        for ($k = 0; $k < $width; $k++) {
            if ($vis[$k]) {
                $L = $R = $k;
                while ($vis[$R] == 1) {
                    $R++;
                }
                $str = '';
                for ($i = 4; $i <= 34; $i++) {
                    for ($j = $L; $j < $R; $j++) {
                        $str .= $grey[$i][$j] < 220 ? '1' : '0';
                    }
                }
                $max = 0;
                $ch = '';
                foreach ($this->OCR as $key => $vo) {
                    similar_text($str, $vo, $per);
                    if ($per > $max) {
                        $max = $per;
                        $ch = $key;
                    }
                }
                $result .= $ch;
                $k = $R;
            }
        }
        $ans = eval("return $result;");
        return $ans;
    }
}
